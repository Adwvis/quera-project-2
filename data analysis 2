import pandas as pd
import matplotlib.pyplot as plt
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
import re
import nltk
from wordcloud import WordCloud
from collections import Counter

nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')

train_data = pd.read_csv(rf"C:\Users\Asus\Desktop\train_data.csv")

positive_reviews = train_data[train_data['overall'].isin([4, 5])]['reviewText'].str.cat(sep=' ')
neutral_reviews = train_data[train_data['overall'] == 3]['reviewText'].str.cat(sep=' ')
negative_reviews = train_data[train_data['overall'].isin([1, 2])]['reviewText'].str.cat(sep=' ')

def preprocess_text(text):
    text = re.sub(r'[^\w\s]', '', text) 
    text = re.sub(r'\d+', '', text)   
    tokens = word_tokenize(text.lower()) 
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]  
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(word) for word in tokens]  
    return tokens

positive_words = preprocess_text(positive_reviews)
neutral_words = preprocess_text(neutral_reviews)
negative_words = preprocess_text(negative_reviews)

positive_counts = Counter(positive_words)
neutral_counts = Counter(neutral_words)
negative_counts = Counter(negative_words)

common_words = set(positive_counts.keys()) & set(neutral_counts.keys()) & set(negative_counts.keys())

positive_unique = {word: count for word, count in positive_counts.items() if word not in common_words}
neutral_unique = {word: count for word, count in neutral_counts.items() if word not in common_words}
negative_unique = {word: count for word, count in negative_counts.items() if word not in common_words}

def generate_wordcloud(word_counts, title):
    wordcloud = WordCloud(
        width=800,
        height=400,
        background_color='white',
        max_words=100,
        colormap='viridis'
    ).generate_from_frequencies(word_counts)
    
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.title(title, fontsize=14)
    plt.show()

generate_wordcloud(positive_unique, 'Word Cloud for Positive Reviews (Unique Words)')
generate_wordcloud(neutral_unique, 'Word Cloud for Neutral Reviews (Unique Words)')
generate_wordcloud(negative_unique, 'Word Cloud for Negative Reviews (Unique Words)')
